#include<iostream>
#include <cmath>
#include <vector>

using namespace std;

//Binary search iterative

int
bsearch1 (vector < int >arr, int x)
{
  int n = arr.size ();
  int l = 0;
  int r = n - 1;
  int m = 0;
  while (l <= r)
    {
      m = (r + l) / 2;
      if (arr[m] == x)
	return m;

      if (arr[m] < x)
	l = m + 1;
      else
	r = m - 1;
    }
  return -1;
}

int
bsearch2 (vector < int >arr, int x, int l, int r)
{
  if (l > r)
    return -1;
  int m = (r + l) / 2;

  if (arr[m] == x)
    return m;

  if (arr[m] > x)
    return bsearch2 (arr, x, l, m - 1);
  if (arr[m] < x)
    return bsearch2 (arr, x, m + 1, r);
}

/*
int firstOccur(vector <int> arr,int x)
{
    int l = 0;
    int r = arr.size()-1;
    int m = 0;
    while(l <= r)
    {
        m =(l+r)/2;
        if(arr[l] == x)
        {
            return l;
        }
        if(arr[m] > x)
        {
            r = m-1;
        }
        else if(arr[m] < x)
        l=m+1;
        else
        r=m;
    }
    return -1;
}
int firstOccur(vector <int> arr,int x,int l,int r)
{
    if(l>r)
    return -1;
    
    int m = (l+r)/2;
    
    if(arr[l] == x)
    return l;
 
    if(arr[m] < x)
    return firstOccur(arr,x,m+1,r);
    else if(arr[m]>x)
    return firstOccur(arr,x,l,m-1);
    else   if(arr[m] == x)
    return firstOccur(arr,x,l,m);
}
*/
// 1st occurense in a sorted array - Geeks for Geeks

int
firstOccur (vector < int >arr, int x)
{
  int l = 0;
  int r = arr.size () - 1;
  int m = 0;
  while (l <= r)
    {
      m = (l + r) / 2;

      if (arr[m] > x)
	r = m - 1;
      else if (arr[m] < x)
	l = m + 1;

      else
	{
	  if (arr[m] == 0 || arr[m] == arr[m - 1])
	    return m;
	  else
	    r = m - 1;
	}


    }
}

//Index of last occurence in a sorted std::array 
int
lastOccur (vector < int >arr, int x)
{
  int l = 0;
  int r = arr.size ();
  int m = 0;
  while (l <= r)
    {
      m = (l + r) / 2;
      if (arr[r] == x)
	return r;

      if (arr[m] > x)
	r = m - 1;
      else if (arr[m] < x)
	l = m + 1;
      else
	l = m;
    }
  return -1;
}

//Counting occurences

int
occurCount (vector < int >arr, int x)
{
  int l = firstOccur (arr, x);
  //cout << l;
  int r = lastOccur (arr, x);
  //cout << r;
  if (l != -1 && r != -1)
    return r - l + 1;
  else
    return -1;
}


//Counting 1 in a binary sorted array
int countOnes(int arr[], int n)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(arr[mid] == 0)
			low = mid + 1;
		else
		{
			if(mid == 0 || arr[mid - 1] == 0)
				return (n - mid);
			else 
				high = mid -1;
		}
	}

	return 0;		
}


// Square Root
int squareRoot(int x)
{
    if(x<1)
    return 0;
    
    int l = 1;
    int r = x;
    int m = 0;
    long sq = 1;
    int ans = -1;
    while(l<=r)
    {
        m = (l+r)/2;
        sq = m*m;
        if(sq == x)
        return m;
        else if(sq > x)
        r = m-1;
        else
        {
            l=m+1;
            ans = m;
        }
        
}
return ans;

}

// Infinite sorted array
/*
int infiniteSearch(vector <int> arr,int x)
{
    if(arr[0] == x)
    return 0;
    
    int i = 1;
    while(arr[i] < x)
    i=i*2;
    
    if(arr[i] == x)
    return i;
    
    return binarySearch(arr,x,i/2 + 1,i);
}
*/
// Minimum element in a rotated and sorted array

int rotatedSearch(vector <int> arr,int x)
{
    int l = 0;
    int r = arr.size()-1;
    int m = 0;
    while(l <= r)
    {
        m = (r+l)/2;
        //Decide which half of array is sorted
        if(arr[m] == x)
        return m;
        else
        if(arr[m] < arr[r]) // right half is sorted
        {
            if(x > arr[m] && x<=arr[r])
            l = m+1;
            else if(x<arr[m])
            r = m-1;
        }
        else
        {
            if(x >= arr[l] && x < arr[m])
            r = m-1;
            else if(x >arr[m])
            l = m+1;
        }
    }
    return -1;

}

int main ()
{
  vector <int>arr {100,200,500,1000,2000,10,20};
  int len = arr.size () - 1;
  int m = len / 2;
  cout << rotatedSearch(arr,1000);
  return 0;
}
